import Head from "next/head";
import Image from "next/image";
import { GetStaticPaths, GetStaticProps } from "next";
import { getPost, getPosts } from "@/data/posts.data";
import Link from "next/link";
import { getPostHref, Post, PostMeta, TAGS } from "@/core/post.core";
import { marked } from "marked";
import constate from "constate";
import React, { useMemo } from "react";
import { PostContentWidget } from "@/widgets/post.widget";

interface UrlQuery {
  slug: string[];
  draft?: string;

  [key: string]: string | string[] | undefined;
}

interface Props {
  post: Post;
}

export const getStaticPaths: GetStaticPaths<UrlQuery> = async () => {
  const metas = await getPosts();

  return {
    paths: metas.map((meta) => {
      const slug = meta.path.split("/").filter(Boolean);
      const draft = meta.draft ? "1" : undefined;
      return {
        params: {
          slug,
          draft,
        },
      };
    }),
    fallback: false, // can also be true or 'blocking'
  };
};

export const getStaticProps: GetStaticProps<Props, UrlQuery> = async (
  context
) => {
  const slug = context.params?.slug ?? [];
  const draft = Boolean(context.params?.draft);
  const post = await getPost(slug, draft);

  if (!post) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      post,
    }, // will be passed to the page component as props
  };
};

function usePost({ rawStr }: { rawStr: string }) {
  const tokens = useMemo(() => {
    const lexer = new marked.Lexer();
    return lexer.lex(rawStr);
  }, [rawStr]);

  return {
    tokens,
  };
}
const [PostProvider, usePostContext] = constate(usePost);

function PostContent() {
  const { tokens } = usePostContext();

  return <PostContentWidget tokens={tokens} />;
}

function PostHeader({ meta }: { meta: PostMeta }) {
  return (
    <div>
      <div>{meta.date}</div>
      <h1>{meta.title}</h1>
      <div>
        {meta.tags.map((t) => (
          <div key={t}>{TAGS[t]?.name.cn ?? t}</div>
        ))}
      </div>
      <div>
        {meta.references.map(([t, href], idx) => (
          <a key={idx} href={href} target="_blank">
            {t}
          </a>
        ))}
      </div>
      <div>
        {meta.requirements.map((t, idx) => (
          <div key={idx}>{t}</div>
        ))}
      </div>
      <div>
        {meta.environment.map(([e, v], idx) => (
          <div>
            {e}: {v}
          </div>
        ))}
      </div>
    </div>
  );
}

export default function PostDetail({ post }: Props) {
  return (
    <>
      <Head>
        <title>{post.meta.title}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PostProvider rawStr={post.rawStr}>
        <main>
          <PostHeader meta={post.meta} />
          <PostContent />
        </main>
      </PostProvider>
    </>
  );
}
